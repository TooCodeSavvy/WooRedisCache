name: CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: exampledb
          MYSQL_USER: root
          MYSQL_PASSWORD: rootpass
          MYSQL_ROOT_PASSWORD: rootpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create secret files
      run: |
        echo "${{ secrets.WORDPRESS_DB_USER }}" > wordpress_db_user.txt
        echo "${{ secrets.WORDPRESS_DB_PASSWORD }}" > wordpress_db_password.txt
        echo "${{ secrets.WORDPRESS_DB_NAME }}" > wordpress_db_name.txt
        echo "rootpass" > mysql_root_password.txt

    # - name: Build Docker images
    #   run: |
    #     docker build -t my-phpunit-tests -f wp-content/plugins/CustomWooCommerceRedis/tests/Dockerfile .

    - name: Start services
      run: |
        docker compose -f docker-compose.github-actions.yml up -d

        - name: Wait for MySQL to be ready
        env:
          MYSQL_ROOT_PASSWORD: rootpass
        run: |
          retries=30
          until docker compose exec -T db mysql -u root -p"${MYSQL_ROOT_PASSWORD}" -e "SELECT 1" 2>/dev/null; do
            if [ $retries -le 0 ]; then
              echo "MySQL is not ready after waiting, exiting..."
              docker compose logs db
              exit 1
            fi
            echo "Waiting for MySQL to accept connections..."
            retries=$((retries - 1))
            sleep 10
          done
          echo "MySQL is ready"

    - name: Wait for WordPress to be ready
      run: |
        until curl -sSf http://localhost:8080 > /dev/null; do
          echo "Waiting for WordPress..."
          sleep 5
        done

    - name: Install WordPress and configure WooCommerce
      run: |
        docker compose logs db
        docker compose exec -T -u root wordpress wp core download --path=/usr/share/nginx/html --allow-root
        # Generate wp-config.php
        docker compose exec -T -u root wordpress wp config create --dbname="${{ secrets.WORDPRESS_DB_NAME }}" --dbhost=db --dbuser="${{ secrets.WORDPRESS_DB_USER }}" --dbpass="${{ secrets.WORDPRESS_DB_PASSWORD }}" --path=/usr/share/nginx/html --allow-root
        # Now it's safe to change ownership
        #docker compose exec -T -u root wordpress chown -R root:root /usr/share/nginx/html/wp-config.php
        docker compose exec -T -u root wordpress chown -R root:root /usr/share/nginx/html/wp-content/
        docker compose exec -T -u root wordpress wp core install --path=/usr/share/nginx/html --url="http://localhost:8080" --title="Test Site" --admin_user="${{ secrets.WORDPRESS_DB_USER }}" --admin_password="${{ secrets.MYSQL_ROOT_PASSWORD }}" --admin_email="admin@example.com" --allow-root
        docker compose exec -u root wordpress wp plugin install woocommerce --path=/usr/share/nginx/html --allow-root
        docker compose exec -u root wordpress wp plugin activate woocommerce --path=/usr/share/nginx/html --allow-root
        docker compose exec -u root wordpress wp plugin activate custom-woocommerce-redis-integration --path=/usr/share/nginx/html --allow-root

    - name: Check if SQL file is mounted
      run: |
        docker compose exec -T db ls -l /tmp

    - name: Import WooCommerce DB
      run: |
        docker compose exec -T db sh -c 'cat /tmp/exampledb.sql | mysql -u root -p"${MYSQL_ROOT_PASSWORD}" "${WORDPRESS_DB_NAME}"'
      env:
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        WORDPRESS_DB_NAME: ${{ secrets.WORDPRESS_DB_NAME }}

    # - name: Clone wc-import-csv repository
    #   run: |
    #     docker compose exec -u root wordpress apt-get update 
    #     docker compose exec -u root wordpress apt-get install -y git 
    #     docker compose exec -u root wordpress wp cli update --path=/usr/share/nginx/html --allow-root
    #     docker compose exec -u root wordpress git clone https://github.com/TooCodeSavvy/wc-import-csv /usr/share/nginx/html/wp-content/plugins/wc-import-csv
    
    # - name: Activate wc-import-csv plugin
    #   run: |
    #     docker compose exec -u root wordpress ls -la /usr/share/nginx/html/wp-content/plugins/ 
    #     docker compose exec -u root wordpress ls -la /usr/share/nginx/html/wp-content/plugins/wc-import-csv 
    #     docker compose exec -u root wordpress wp plugin activate wc-import-csv --path=/usr/share/nginx/html --allow-root

    # - name: Import Products from CSV using wc-import-csv CLI
    #   run: docker compose exec -u root wordpress wp wc-product product_import_from_csv --csv=/usr/share/nginx/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --path=/usr/share/nginx/html --allow-root --user=${{ secrets.WORDPRESS_DB_USER }}       
    
           
    # - name: Generate WooCommerce API Keys
    #   run: | 
    #     # Import products
    #     docker compose exec -u root wordpress wp user list --path=/usr/share/nginx/html --allow-root
    #     # docker compose exec -u root wordpress wp wc product --info --path=/usr/share/nginx/html --allow-root 
    #     # Generate WooCommerce API keys
    #     docker compose exec -u root wordpress wp wc-api-key generate 1 "Mijn WooCommerce API Sleutel" read_write --path=/usr/share/nginx/html --allow-root
    #     docker compose exec -T -u root wordpress ls -la /usr/share/nginx/html/
    #     docker compose exec -u root wordpress cat /usr/share/nginx/html/output.log 

    #    docker compose exec -u root wordpress wp wc product import /usr/share/nginx/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --authors=create --path=/usr/share/nginx/html --allow-root
    # - name: Seed WooCommerce Products
    #   run: docker-compose exec phpunit php /usr/share/nginx/html/wp-content/plugins/custom-woocommerce-redis-integration/seed-products.php

    # - name: Run PHPUnit tests
    #   run: |
    #     docker compose -f docker-compose.yml run phpunit

    - name: Shutdown services
      if: always()
      run: |
        docker compose -f docker-compose.yml down
