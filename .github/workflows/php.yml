name: CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.WORDPRESS_DB_NAME }}
          MYSQL_USER: ${{ secrets.WORDPRESS_DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create secret files
      run: |
        echo "${{ secrets.WORDPRESS_DB_USER }}" > wordpress_db_user.txt
        echo "${{ secrets.WORDPRESS_DB_PASSWORD }}" > wordpress_db_password.txt
        echo "${{ secrets.WORDPRESS_DB_NAME }}" > wordpress_db_name.txt
        echo "${{ secrets.MYSQL_ROOT_PASSWORD }}" > mysql_root_password.txt

    # - name: Build Docker images
    #   run: |
    #     docker build -t my-phpunit-tests -f wp-content/plugins/CustomWooCommerceRedis/tests/Dockerfile .

    - name: Start services
      run: |
        docker compose -f docker-compose.github-actions.yml up -d

    - name: Wait for MySQL to be ready
      run: |
        until docker compose exec -T db mysql -u ${{ secrets.WORDPRESS_DB_USER }} -p${{ secrets.WORDPRESS_DB_PASSWORD }} ${{ secrets.WORDPRESS_DB_NAME }} -e "SELECT 1"; do
          echo "Waiting for MySQL to accept connections..."
          sleep 5
        done

    - name: Wait for WordPress to be ready
      run: |
        until curl -sSf http://localhost:8080 > /dev/null; do
          echo "Waiting for WordPress..."
          sleep 5
        done

    - name: Install WordPress and configure WooCommerce
      run: |
        docker compose logs db
        docker compose exec -T -u root wordpress wp core download --path=/usr/share/nginx/html --allow-root
        # Generate wp-config.php
        docker compose exec -T -u root wordpress wp config create --dbname="${{ secrets.WORDPRESS_DB_NAME }}" --dbhost=db --dbuser="${{ secrets.WORDPRESS_DB_USER }}" --dbpass="${{ secrets.WORDPRESS_DB_PASSWORD }}" --path=/usr/share/nginx/html --allow-root
        # Now it's safe to change ownership
        #docker compose exec -T -u root wordpress chown -R root:root /usr/share/nginx/html/wp-config.php
        docker compose exec -T -u root wordpress chown -R root:root /usr/share/nginx/html/wp-content/
        docker compose exec -T -u root wordpress wp core install --path=/usr/share/nginx/html --url="http://localhost:8080" --title="Test Site" --admin_user="${{ secrets.WORDPRESS_DB_USER }}" --admin_password="${{ secrets.MYSQL_ROOT_PASSWORD }}" --admin_email="admin@example.com" --allow-root
        docker compose exec -u root wordpress wp plugin install woocommerce --path=/usr/share/nginx/html --allow-root
        docker compose exec -u root wordpress wp plugin activate woocommerce --path=/usr/share/nginx/html --allow-root
        docker compose exec -u root wordpress wp plugin activate custom-woocommerce-redis-integration --path=/usr/share/nginx/html --allow-root
 
    - name: Import WooCommerce DB
      run: |
        docker compose exec -T db sh -c 'cat /tmp/exampledb.sql | mysql -u exampleuser -p"${{ secrets.WORDPRESS_DB_PASSWORD }}" "${{secrets.WORDPRESS_DB_NAME}}"'
     
    - name: Run PHPUnit tests
      run: |
        docker compose -f docker-compose.github-actions.yml run phpunit

    - name: Shutdown services
      if: always()
      run: |
        docker compose -f docker-compose.yml down
