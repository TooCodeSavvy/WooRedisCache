name: CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: exampledb
          MYSQL_USER: exampleuser
          MYSQL_PASSWORD: examplepass
          MYSQL_ROOT_PASSWORD: examplepass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create secret files
      run: |
        echo "exampleuser" > wordpress_db_user.txt
        echo "examplepass" > wordpress_db_password.txt
        echo "exampledb" > wordpress_db_name.txt
        echo "examplepass" > mysql_root_password.txt

    # - name: Build Docker images
    #   run: |
    #     docker build -t my-phpunit-tests -f wp-content/plugins/CustomWooCommerceRedis/tests/Dockerfile .

    - name: Start services
      run: |
        docker-compose -f docker-compose.github-actions.yml up -d

    - name: Wait for MySQL to be ready
      run: |
        until docker compose exec db mysqladmin ping --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Wait for WordPress to be ready
      run: |
        until curl -sSf http://localhost:8080 > /dev/null; do
          echo "Waiting for WordPress..."
          sleep 5
        done

    - name: Install WordPress and configure WooCommerce
      run: |
        docker-compose exec db mysql -u root -p SHOW GRANTS FOR 'exampleuser'@'%';
        docker compose exec -u root wordpress wp core install --url="http://localhost:8080" --title="Test Site" --admin_user="exampleuser" --admin_password="examplepass" --admin_email="admin@example.com" --allow-root --dbhost=dbdocker compose exec -u root wordpress wp core install --url="http://localhost:8080" --title="Test Site" --admin_user="exampleuser" --admin_password="examplepass" --admin_email="admin@example.com" --allow-root
    #     docker compose exec -u root phpunit wp core install --url="http://localhost:8080" --title="Test Site" --admin_user="admin" --admin_password="password" --admin_email="admin@example.com" --allow-root
    #     docker compose exec -u root wordpress wp plugin install woocommerce --activate --allow-root
    #     docker compose exec -u root wordpress wp plugin activate custom-woocommerce-redis-integration --allow-root
    #     # Import products
    #     docker compose exec -u root wordpress wp wc product_csv import --file=/var/www/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --update_existing=true --allow-rootcker compose exec -u root wordpress wp wc product_csv import --file=/var/www/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --update_existing=truedocker compose exec wordpress -u root -- wp wc product_csv import --file=/var/www/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --update_existing=truedocker compose exec wordpress wp wc product_csv import --file=/var/www/html/wp-content/plugins/woocommerce/sample-data/sample_products.csv --update_existing=true  

    # - name: Seed WooCommerce Products
    #   run: docker-compose exec phpunit php /usr/share/nginx/html/wp-content/plugins/custom-woocommerce-redis-integration/seed-products.php

    # - name: Run PHPUnit tests
    #   run: |
    #     docker compose -f docker-compose.yml run phpunit

    - name: Shutdown services
      if: always()
      run: |
        docker compose -f docker-compose.yml down
